
git init ## SIRVE PARA INICIAR LA CARPETA .git EN EL REPOSITORIO
git config --global user.name "nombre" ## SIRVE PARA DARLE UN NOMBRE DE USUARIO QUE SE USARA PARA SABER QUIEN HACE LOS CAMBIOS
git config --global user.name "email"  ## LO MISMO QUE PARA EL NOMBRE
git config --list	## PERMITE VER LA CONFIGURACION DE GIT
mkdir algo	## ME VA A CREAR LA CAPERTA ALGO EN EL DIRECTORIO DONDE ME ENCUENTRO
cd	##ME PERMITE MOVERME DE CARPETAS, PARA AÑADIR O MODIFICAR ALGUNO ELEMENTO
git status	## ME PERMITE VER EL ESTADO DE LOS ARCHIVOS O CARPETAS QUE TENGO EN EL REPOSITORIO, PARA SABER SI SE HAN MODIFICADO Y SI ESTAN LISTAS PARA AÑADIR
cat > archivo.txt	## ME CREA UN ARCHIVO TXT QUE PUEDE RELLENAR EN ESE MOMENTO. PARA SALIR DE EL Y CERRARLO PULSO CTRL+D. SI VUELVO A PONER ESTO MISMO CON EL MISMO ARCHIVO, ELIMINARE TODO LO QUE HAY EN SU INTERIOR.
cat > carpeta\archivo.txt	## CON ESTO SIN SALIRME DE LA CARPETA EN LA QUE ESTOY, CREO UN ARCHIVO EN UNA CARPETA QUE YA TENGO. LA BARRA ES LA OTRA....
cat archivo.txt		## ME LEE EL ARCHIVO Y ME LO IMPRIME EN LA PANTALLA
nano archivo.txt	## ME PERMITE MODIFICAR EL ARCHIVO TXT SIN ELIMINAR NADA DE LO YA ESCRITO SIN TENER QUE ABRIR EL ARCHIVO DESDE SU CARPETA.
echo 'texto' >> archivo		## CON ESTO PUEDO AÑADIR AL FINAL DEL ARCHIVO EL TEXTO INTRODUCIDO SIN HACER EL NANO.
git add cosas		## CON ESTO AÑADO MIS ARCHIVOS MODIFICADOS, DONDE COSAS ES EL ARCHIVO O CARPETA A MOVER AL ESTADO DE PREPARACION
git add .	## CON EL . AÑADO TODOS LOS CAMBIOS REALIZADOS
git commit	## AÑADO/CONFIRMO MIS ARCHIVOS EN PREPARACION AL REPOSITORIO. DESPUES DE ESTO SE ME ABRIRA UNA VENTANA DONDE TENDRE QUE INTRODUCIR UN TEXTO DE LO QUE AÑADO EN ESE COMMIT O ALGO EXPLICATIVO DE LO QUE HE CAMBIADO.
git commit -m 'texto'	## ES LO MISMO QUE LO DE ARRIBA PERO SIN QUE SE ABRA LA SEGUNA VENTANA. DONDE PONE text HAY QUE PONER EL MENSAJE SEÑALANDO LOS CAMBIOS REALIZADOS, LO MISMO QUE ARRIBA.
git diff archivo	## ESTO SE USA PARA QUE UNA VEZ HAYAS REALIZADO CAMBIOS EN UN ARCHIVO AL QUE YA LE HICISTE COMMIT SE IMPRIMAN LOS CAMBIOS QUE HAS REALIADO. EN BLANCO LO QUE SIGUE IGUAL. EN ROJO LO QUE SE HA BORRADO Y EN VERDE LO QUE SE HA AÑADIDO
git diff HEAD~n..HEAD (archivo)	## MUESTRA LAS DIFERENCIAS ENTRE LOS n ULTIMOS COMMITS REALIZADOS. SI NO PONGO EL ARCHIVO ME LO COMPARA TODO, PERO SI LO PONGO PUES ESO. HEAD ES LA RAMA EN LA QUE ME ENCUENTRO EN ESE MOMENTO, ASI QUE EL ~ INDICA CUANTAS RAMAS MAS ATRAS.
git diff <codigo hash de la version deseada>..HEAD	## CON ESTO PUEDO COMPARAR LOS CAMBIOS REALIZADOS EN LOS DIFERENTES COMMITS. EL HASH ES EL NOMBRE ASOCIADO A CADA COMMIT Y VA SIN < >. ES UN CONJUNTO DE NUMERO Y LETRAS MUY LARGO. 
git show	## MUESTRA EL ULTIMO COMMIT QUE SE HIZO CON EL TEXTO DE LO QUE SE CAMBIO.
git commit --amend -m "texto"	## ESTO ME PERMITE CAMBIAR EL TEXTO INTRODUCIDO EN EL ULTIMO COMMIT REALIZADO.
git log		## MUESTRA TODOS LOS COMMIT REALIZADOS O QUE YO LE PIDA.
git annotate archivo	## ME MUESTRA QUIEN A ESCRITO CADA LINEA DE TEXTO DEL ARCHIVO CON LA HORA, TODO(O CASI) 

